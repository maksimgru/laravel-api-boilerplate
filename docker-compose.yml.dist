version: '3.7'

services:

# Workspace Container
    workspace:
      container_name: my_workspace
      build:
        context: ./env/docker/workspace
        args:
          - PHP_VERSION=${PHP_VERSION}
          - PHP_XDEBUG_ENABLE=${PHP_XDEBUG_ENABLE}
          - PHP_XDEBUG_VERSION=${PHP_XDEBUG_VERSION}
          - PHP_XDEBUG_REMOTE_CONNECT_BACK=${PHP_XDEBUG_REMOTE_CONNECT_BACK}
          - COMPOSER_PROCESS_TIMEOUT=${COMPOSER_PROCESS_TIMEOUT}
      volumes:
        - ./:/var/www:cached
        - ~/.ssh:/home/laradock/.ssh
        - ~/.gitconfig:/home/laradock/.gitconfig
        - ~/.config/composer:/home/laradock/.config/composer
        - ~/.aws:/home/laradock/.aws
      tty: true
      networks:
        - my_network

# PHP-FPM
    php-fpm:
      container_name: my_php_fpm
      restart: always
      build:
        context: ./env/docker/php-fpm
        args:
          - PHP_VERSION=${PHP_VERSION}
          - PHP_XDEBUG_ENABLE=${PHP_XDEBUG_ENABLE}
          - PHP_XDEBUG_VERSION=${PHP_XDEBUG_VERSION}
          - PHP_XDEBUG_REMOTE_CONNECT_BACK=${PHP_XDEBUG_REMOTE_CONNECT_BACK}
      volumes:
        - ./:/var/www:cached
        - ${CRON_LOG_PATH}:/var/log/cron
        - ${SUPERVISOR_LOG_PATH}:/var/log/supervisor
      depends_on:
        - workspace
      networks:
        - my_network

# NGINX
    nginx:
      container_name: my_nginx
      restart: always
      build:
        context: ./env/docker/nginx
      volumes:
        - ./:/var/www:cached
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      depends_on:
        - php-fpm
        - postgres
      environment:
        - HTTPS_METHOD=${HTTPS_METHOD}
      ports:
        - ${NGINX_PORT}:80
      networks:
        - my_network

# PostgreSQL
    postgres:
      image: "postgres:12.1-alpine"
      container_name: my_postgres
      restart: always
      volumes:
        - ${DATA_PATH_HOST}postgres:/var/lib/postgresql/data
      environment:
        - POSTGRES_DB=${DB_DATABASE}
        - POSTGRES_USER=${DB_USERNAME}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
      ports:
        - ${DB_PORT_EXTERNAL}:5432
      networks:
        - my_network

# Redis
    redis:
      container_name: my_redis
      image: "redis"
      restart: always
      hostname: my_redis
      ports:
        - ${REDIS_PORT_EXTERNAL}:6379
      volumes:
        - ${DATA_PATH_HOST}redis:/data
      networks:
        - my_network

# Adminer
    adminer_dehy:
      image: dehy/adminer
      container_name: my_adminer
      restart: always
      ports:
        - ${ADMINER_PORT}:80
      networks:
        - my_network

# Volumes configuration
volumes:
  postgres:
    driver: "local"

# Network configuration
networks:
  my_network:
    name: my_network
